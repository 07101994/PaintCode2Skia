package com.example.project;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.util.Stack;



/**
 * Created by AuthorName on 10 Nov 2017.
 * Copyright Â© 2017 CompanyName. All rights reserved.
 *
 * This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
 * http://www.paintcodeapp.com
 *
 * @author AuthorName
 */
public class StyleKitName {
    
    
    // In Trial version of PaintCode, the code generation is limited to 3 canvases.
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForClock {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 260f, 260f);
        private static RectF resizedFrame = new RectF();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF textRect = new RectF();
        private static Path textPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
        private static RectF rectangle5Rect = new RectF();
        private static Path rectangle5Path = new Path();
        private static RectF rectangle6Rect = new RectF();
        private static Path rectangle6Path = new Path();
        private static RectF rectangle7Rect = new RectF();
        private static Path rectangle7Path = new Path();
        private static RectF rectangle8Rect = new RectF();
        private static Path rectangle8Path = new Path();
        private static RectF rectangle9Rect = new RectF();
        private static Path rectangle9Path = new Path();
        private static RectF rectangle10Rect = new RectF();
        private static Path rectangle10Path = new Path();
        private static RectF rectangle11Rect = new RectF();
        private static Path rectangle11Path = new Path();
        private static RectF rectangle12Rect = new RectF();
        private static Path rectangle12Path = new Path();
        private static RectF text2Rect = new RectF();
        private static TextPaint text2TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text2StaticLayout = new PaintCodeStaticLayout();
        private static RectF text3Rect = new RectF();
        private static TextPaint text3TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text3StaticLayout = new PaintCodeStaticLayout();
        private static RectF text4Rect = new RectF();
        private static TextPaint text4TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text4StaticLayout = new PaintCodeStaticLayout();
        private static RectF text13Rect = new RectF();
        private static TextPaint text13TextPaint = new TextPaint();
        private static PaintCodeStaticLayout text13StaticLayout = new PaintCodeStaticLayout();
    }
    
    public static void drawClock(Canvas canvas, Context context, int numbersColor, int darkHandsColor, int lightHandColor, int rimColor, int tickColor, int faceColor, float hours, float minutes, float seconds) {
        StyleKitName.drawClock(canvas, context, new RectF(0f, 0f, 260f, 260f), ResizingBehavior.AspectFit, numbersColor, darkHandsColor, lightHandColor, rimColor, tickColor, faceColor, hours, minutes, seconds);
    }
    
    public static void drawClock(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, int numbersColor, int darkHandsColor, int lightHandColor, int rimColor, int tickColor, int faceColor, float hours, float minutes, float seconds) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForClock.paint;
        
        // Local Variables
        String expression = hours > 12f ? "PM" : "AM";
        float secondsAngle = -seconds / 60f * 360f;
        float minuteAngle = -(minutes / 60f * 360f - secondsAngle / 60f);
        float hourAngle = -hours / 12f * 360f + minuteAngle / 12f;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForClock.resizedFrame;
        StyleKitName.resizingBehaviorApply(resizing, CacheForClock.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 260f, resizedFrame.height() / 260f);
        
        // Oval 2
        canvas.save();
        canvas.translate(130f, 130f);
        currentTransformation.peek().postTranslate(130f, 130f);
        RectF oval2Rect = CacheForClock.oval2Rect;
        oval2Rect.set(-116f, -116f, 116f, 116f);
        Path oval2Path = CacheForClock.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(rimColor);
        canvas.drawPath(oval2Path, paint);
        canvas.restore();
        
        // Oval
        canvas.save();
        canvas.translate(130f, 130f);
        currentTransformation.peek().postTranslate(130f, 130f);
        RectF ovalRect = CacheForClock.ovalRect;
        ovalRect.set(-110f, -110f, 110f, 110f);
        Path ovalPath = CacheForClock.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(faceColor);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Text
        RectF textRect = CacheForClock.textRect;
        textRect.set(118.48f, 34.85f, 142.5f, 53f);
        Path textPath = CacheForClock.textPath;
        textPath.reset();
        textPath.moveTo(123.73f, 38.95f);
        textPath.lineTo(120.23f, 41.82f);
        textPath.lineTo(118.48f, 39.75f);
        textPath.lineTo(124f, 35.3f);
        textPath.lineTo(126.73f, 35.3f);
        textPath.lineTo(126.73f, 53f);
        textPath.lineTo(123.73f, 53f);
        textPath.lineTo(123.73f, 38.95f);
        textPath.close();
        textPath.moveTo(130.73f, 50.25f);
        textPath.lineTo(137.55f, 43.55f);
        textPath.cubicTo(138.1f, 43.02f, 138.54f, 42.48f, 138.86f, 41.94f);
        textPath.cubicTo(139.19f, 41.4f, 139.35f, 40.78f, 139.35f, 40.07f);
        textPath.cubicTo(139.35f, 39.24f, 139.08f, 38.58f, 138.54f, 38.09f);
        textPath.cubicTo(138f, 37.6f, 137.33f, 37.35f, 136.53f, 37.35f);
        textPath.cubicTo(135.67f, 37.35f, 134.99f, 37.64f, 134.48f, 38.21f);
        textPath.cubicTo(133.96f, 38.79f, 133.64f, 39.51f, 133.53f, 40.38f);
        textPath.lineTo(130.6f, 39.92f);
        textPath.cubicTo(130.68f, 39.19f, 130.89f, 38.52f, 131.23f, 37.9f);
        textPath.cubicTo(131.56f, 37.28f, 131.98f, 36.75f, 132.5f, 36.3f);
        textPath.cubicTo(133.02f, 35.85f, 133.62f, 35.5f, 134.31f, 35.24f);
        textPath.cubicTo(135f, 34.98f, 135.76f, 34.85f, 136.57f, 34.85f);
        textPath.cubicTo(137.34f, 34.85f, 138.08f, 34.96f, 138.79f, 35.17f);
        textPath.cubicTo(139.5f, 35.39f, 140.12f, 35.72f, 140.68f, 36.16f);
        textPath.cubicTo(141.23f, 36.6f, 141.66f, 37.15f, 141.99f, 37.79f);
        textPath.cubicTo(142.31f, 38.43f, 142.48f, 39.17f, 142.48f, 40.03f);
        textPath.cubicTo(142.48f, 40.59f, 142.4f, 41.12f, 142.25f, 41.61f);
        textPath.cubicTo(142.1f, 42.1f, 141.9f, 42.57f, 141.64f, 43f);
        textPath.cubicTo(141.38f, 43.43f, 141.08f, 43.85f, 140.74f, 44.24f);
        textPath.cubicTo(140.4f, 44.63f, 140.03f, 45.01f, 139.63f, 45.38f);
        textPath.lineTo(134.53f, 50.25f);
        textPath.lineTo(142.5f, 50.25f);
        textPath.lineTo(142.5f, 53f);
        textPath.lineTo(130.73f, 53f);
        textPath.lineTo(130.73f, 50.25f);
        textPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(numbersColor);
        canvas.drawPath(textPath, paint);
        
        // Bezier
        canvas.save();
        canvas.translate(130f, 130f);
        currentTransformation.peek().postTranslate(130f, 130f);
        canvas.rotate(-(minuteAngle + 90f));
        currentTransformation.peek().postRotate(-(minuteAngle + 90f));
        RectF bezierRect = CacheForClock.bezierRect;
        bezierRect.set(-10f, -10f, 95f, 10f);
        Path bezierPath = CacheForClock.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(7.07f, -7.07f);
        bezierPath.cubicTo(8.25f, -5.89f, 9.07f, -4.49f, 9.54f, -3f);
        bezierPath.lineTo(95f, -3f);
        bezierPath.lineTo(95f, 3f);
        bezierPath.lineTo(9.54f, 3f);
        bezierPath.cubicTo(9.07f, 4.49f, 8.25f, 5.89f, 7.07f, 7.07f);
        bezierPath.cubicTo(3.17f, 10.98f, -3.17f, 10.98f, -7.07f, 7.07f);
        bezierPath.cubicTo(-10.98f, 3.17f, -10.98f, -3.17f, -7.07f, -7.07f);
        bezierPath.cubicTo(-3.17f, -10.98f, 3.17f, -10.98f, 7.07f, -7.07f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(darkHandsColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Bezier 2
        canvas.save();
        canvas.translate(130f, 130f);
        currentTransformation.peek().postTranslate(130f, 130f);
        canvas.rotate(-(hourAngle + 90f));
        currentTransformation.peek().postRotate(-(hourAngle + 90f));
        RectF bezier2Rect = CacheForClock.bezier2Rect;
        bezier2Rect.set(-10f, -10f, 56f, 10f);
        Path bezier2Path = CacheForClock.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(7.07f, -7.07f);
        bezier2Path.cubicTo(7.7f, -6.44f, 8.24f, -5.74f, 8.66f, -5f);
        bezier2Path.lineTo(56f, -5f);
        bezier2Path.lineTo(56f, 5f);
        bezier2Path.lineTo(8.66f, 5f);
        bezier2Path.cubicTo(8.24f, 5.74f, 7.7f, 6.44f, 7.07f, 7.07f);
        bezier2Path.cubicTo(3.17f, 10.98f, -3.17f, 10.98f, -7.07f, 7.07f);
        bezier2Path.cubicTo(-10.98f, 3.17f, -10.98f, -3.17f, -7.07f, -7.07f);
        bezier2Path.cubicTo(-3.17f, -10.98f, 3.17f, -10.98f, 7.07f, -7.07f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(darkHandsColor);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier 3
        canvas.save();
        canvas.translate(130f, 130f);
        currentTransformation.peek().postTranslate(130f, 130f);
        canvas.rotate(-(secondsAngle + 90f));
        currentTransformation.peek().postRotate(-(secondsAngle + 90f));
        RectF bezier3Rect = CacheForClock.bezier3Rect;
        bezier3Rect.set(-6f, -6f, 99f, 6f);
        Path bezier3Path = CacheForClock.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(4.24f, -4.24f);
        bezier3Path.cubicTo(5.16f, -3.33f, 5.72f, -2.19f, 5.92f, -1f);
        bezier3Path.lineTo(99f, -1f);
        bezier3Path.lineTo(99f, 1f);
        bezier3Path.lineTo(5.92f, 1f);
        bezier3Path.cubicTo(5.72f, 2.19f, 5.16f, 3.33f, 4.24f, 4.24f);
        bezier3Path.cubicTo(1.9f, 6.59f, -1.9f, 6.59f, -4.24f, 4.24f);
        bezier3Path.cubicTo(-6.59f, 1.9f, -6.59f, -1.9f, -4.24f, -4.24f);
        bezier3Path.cubicTo(-1.9f, -6.59f, 1.9f, -6.59f, 4.24f, -4.24f);
        bezier3Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(lightHandColor);
        canvas.drawPath(bezier3Path, paint);
        canvas.restore();
        
        // Group
        {
            // Rectangle
            RectF rectangleRect = CacheForClock.rectangleRect;
            rectangleRect.set(127f, 20f, 133f, 28f);
            Path rectanglePath = CacheForClock.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForClock.rectangle2Rect;
            rectangle2Rect.set(127f, 232f, 133f, 240f);
            Path rectangle2Path = CacheForClock.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRect(rectangle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle2Path, paint);
        }
        
        // Group 2
        {
            canvas.save();
            canvas.translate(130f, 130f);
            currentTransformation.peek().postTranslate(130f, 130f);
            canvas.rotate(90f);
            currentTransformation.peek().postRotate(90f);
            
            // Rectangle 3
            RectF rectangle3Rect = CacheForClock.rectangle3Rect;
            rectangle3Rect.set(-3f, -110f, 3f, -102f);
            Path rectangle3Path = CacheForClock.rectangle3Path;
            rectangle3Path.reset();
            rectangle3Path.addRect(rectangle3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle3Path, paint);
            
            // Rectangle 4
            RectF rectangle4Rect = CacheForClock.rectangle4Rect;
            rectangle4Rect.set(-3f, 102f, 3f, 110f);
            Path rectangle4Path = CacheForClock.rectangle4Path;
            rectangle4Path.reset();
            rectangle4Path.addRect(rectangle4Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle4Path, paint);
            
            canvas.restore();
        }
        
        // Group 3
        {
            canvas.save();
            canvas.translate(130f, 130f);
            currentTransformation.peek().postTranslate(130f, 130f);
            canvas.rotate(-30f);
            currentTransformation.peek().postRotate(-30f);
            
            // Rectangle 5
            RectF rectangle5Rect = CacheForClock.rectangle5Rect;
            rectangle5Rect.set(-3f, -110f, 3f, -102f);
            Path rectangle5Path = CacheForClock.rectangle5Path;
            rectangle5Path.reset();
            rectangle5Path.addRect(rectangle5Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle5Path, paint);
            
            // Rectangle 6
            RectF rectangle6Rect = CacheForClock.rectangle6Rect;
            rectangle6Rect.set(-3f, 102f, 3f, 110f);
            Path rectangle6Path = CacheForClock.rectangle6Path;
            rectangle6Path.reset();
            rectangle6Path.addRect(rectangle6Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle6Path, paint);
            
            canvas.restore();
        }
        
        // Group 4
        {
            canvas.save();
            canvas.translate(130f, 130f);
            currentTransformation.peek().postTranslate(130f, 130f);
            canvas.rotate(-60f);
            currentTransformation.peek().postRotate(-60f);
            
            // Rectangle 7
            RectF rectangle7Rect = CacheForClock.rectangle7Rect;
            rectangle7Rect.set(-3f, -110f, 3f, -102f);
            Path rectangle7Path = CacheForClock.rectangle7Path;
            rectangle7Path.reset();
            rectangle7Path.addRect(rectangle7Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle7Path, paint);
            
            // Rectangle 8
            RectF rectangle8Rect = CacheForClock.rectangle8Rect;
            rectangle8Rect.set(-3f, 102f, 3f, 110f);
            Path rectangle8Path = CacheForClock.rectangle8Path;
            rectangle8Path.reset();
            rectangle8Path.addRect(rectangle8Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle8Path, paint);
            
            canvas.restore();
        }
        
        // Group 5
        {
            canvas.save();
            canvas.translate(130f, 130f);
            currentTransformation.peek().postTranslate(130f, 130f);
            canvas.rotate(-120f);
            currentTransformation.peek().postRotate(-120f);
            
            // Rectangle 9
            RectF rectangle9Rect = CacheForClock.rectangle9Rect;
            rectangle9Rect.set(-3f, -110f, 3f, -102f);
            Path rectangle9Path = CacheForClock.rectangle9Path;
            rectangle9Path.reset();
            rectangle9Path.addRect(rectangle9Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle9Path, paint);
            
            // Rectangle 10
            RectF rectangle10Rect = CacheForClock.rectangle10Rect;
            rectangle10Rect.set(-3f, 102f, 3f, 110f);
            Path rectangle10Path = CacheForClock.rectangle10Path;
            rectangle10Path.reset();
            rectangle10Path.addRect(rectangle10Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle10Path, paint);
            
            canvas.restore();
        }
        
        // Group 6
        {
            canvas.save();
            canvas.translate(130f, 130f);
            currentTransformation.peek().postTranslate(130f, 130f);
            canvas.rotate(-150f);
            currentTransformation.peek().postRotate(-150f);
            
            // Rectangle 11
            RectF rectangle11Rect = CacheForClock.rectangle11Rect;
            rectangle11Rect.set(-3f, -110f, 3f, -102f);
            Path rectangle11Path = CacheForClock.rectangle11Path;
            rectangle11Path.reset();
            rectangle11Path.addRect(rectangle11Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle11Path, paint);
            
            // Rectangle 12
            RectF rectangle12Rect = CacheForClock.rectangle12Rect;
            rectangle12Rect.set(-3f, 102f, 3f, 110f);
            Path rectangle12Path = CacheForClock.rectangle12Path;
            rectangle12Path.reset();
            rectangle12Path.addRect(rectangle12Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(tickColor);
            canvas.drawPath(rectangle12Path, paint);
            
            canvas.restore();
        }
        
        // Text 2
        RectF text2Rect = CacheForClock.text2Rect;
        text2Rect.set(111f, 198f, 149f, 238f);
        TextPaint text2TextPaint = CacheForClock.text2TextPaint;
        text2TextPaint.reset();
        text2TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text2TextPaint.setColor(numbersColor);
        text2TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "Avenir Next.ttc"));
        text2TextPaint.setTextSize(25f);
        StaticLayout text2StaticLayout = CacheForClock.text2StaticLayout.get((int) text2Rect.width(), Layout.Alignment.ALIGN_CENTER, "6", text2TextPaint);
        canvas.save();
        canvas.clipRect(text2Rect);
        canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.restore();
        
        // Text 3
        RectF text3Rect = CacheForClock.text3Rect;
        text3Rect.set(201f, 110f, 239f, 150f);
        TextPaint text3TextPaint = CacheForClock.text3TextPaint;
        text3TextPaint.reset();
        text3TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text3TextPaint.setColor(numbersColor);
        text3TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "Avenir Next.ttc"));
        text3TextPaint.setTextSize(25f);
        StaticLayout text3StaticLayout = CacheForClock.text3StaticLayout.get((int) text3Rect.width(), Layout.Alignment.ALIGN_CENTER, "3", text3TextPaint);
        canvas.save();
        canvas.clipRect(text3Rect);
        canvas.translate(text3Rect.left, text3Rect.top + (text3Rect.height() - text3StaticLayout.getHeight()) / 2f);
        text3StaticLayout.draw(canvas);
        canvas.restore();
        
        // Text 4
        RectF text4Rect = CacheForClock.text4Rect;
        text4Rect.set(22f, 110f, 60f, 150f);
        TextPaint text4TextPaint = CacheForClock.text4TextPaint;
        text4TextPaint.reset();
        text4TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text4TextPaint.setColor(numbersColor);
        text4TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "Avenir Next.ttc"));
        text4TextPaint.setTextSize(25f);
        StaticLayout text4StaticLayout = CacheForClock.text4StaticLayout.get((int) text4Rect.width(), Layout.Alignment.ALIGN_CENTER, "9", text4TextPaint);
        canvas.save();
        canvas.clipRect(text4Rect);
        canvas.translate(text4Rect.left, text4Rect.top + (text4Rect.height() - text4StaticLayout.getHeight()) / 2f);
        text4StaticLayout.draw(canvas);
        canvas.restore();
        
        // Text 13
        RectF text13Rect = CacheForClock.text13Rect;
        text13Rect.set(99f, 144f, 161f, 178f);
        TextPaint text13TextPaint = CacheForClock.text13TextPaint;
        text13TextPaint.reset();
        text13TextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        text13TextPaint.setColor(numbersColor);
        text13TextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "Avenir Next.ttc"));
        text13TextPaint.setTextSize(20f);
        StaticLayout text13StaticLayout = CacheForClock.text13StaticLayout.get((int) text13Rect.width(), Layout.Alignment.ALIGN_CENTER, expression, text13TextPaint);
        canvas.save();
        canvas.clipRect(text13Rect);
        canvas.translate(text13Rect.left, text13Rect.top + (text13Rect.height() - text13StaticLayout.getHeight()) / 2f);
        text13StaticLayout.draw(canvas);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForClockPlayground {
        private static RectF symbolRect = new RectF();
        private static RectF symbolTargetRect = new RectF();
        private static RectF symbol2Rect = new RectF();
        private static RectF symbol2TargetRect = new RectF();
        private static RectF symbol3Rect = new RectF();
        private static RectF symbol3TargetRect = new RectF();
    }
    
    
    public static void drawClockPlayground(Canvas canvas, Context context, int numbersColor, int darkHandsColor, int lightHandColor, int rimColor, int tickColor, int faceColor) {
        // Local Colors
        int color4 = Color.argb(255, 255, 255, 255);
        int color2 = Color.argb(255, 56, 95, 117);
        int color5 = Color.argb(255, 22, 216, 217);
        int color = Color.argb(255, 255, 0, 0);
        int color3 = Color.argb(255, 74, 74, 74);
        
        // Symbol
        RectF symbolRect = CacheForClockPlayground.symbolRect;
        symbolRect.set(90f, 30f, 348f, 288f);
        canvas.save();
        canvas.clipRect(symbolRect);
        canvas.translate(symbolRect.left, symbolRect.top);
        RectF symbolTargetRect = CacheForClockPlayground.symbolTargetRect;
        symbolTargetRect.set(0f, 0f, symbolRect.width(), symbolRect.height());
        StyleKitName.drawClock(canvas, context, symbolTargetRect, ResizingBehavior.Stretch, color5, color2, color, color2, tickColor, faceColor, 11f, 45f, 39f);
        canvas.restore();
        
        // Symbol 2
        RectF symbol2Rect = CacheForClockPlayground.symbol2Rect;
        symbol2Rect.set(348f, 33f, 601f, 286f);
        canvas.save();
        canvas.clipRect(symbol2Rect);
        canvas.translate(symbol2Rect.left, symbol2Rect.top);
        RectF symbol2TargetRect = CacheForClockPlayground.symbol2TargetRect;
        symbol2TargetRect.set(0f, 0f, symbol2Rect.width(), symbol2Rect.height());
        StyleKitName.drawClock(canvas, context, symbol2TargetRect, ResizingBehavior.Stretch, numbersColor, darkHandsColor, lightHandColor, rimColor, tickColor, faceColor, 7f, 43f, 3f);
        canvas.restore();
        
        // Symbol 3
        RectF symbol3Rect = CacheForClockPlayground.symbol3Rect;
        symbol3Rect.set(611f, 33f, 871f, 293f);
        canvas.save();
        canvas.clipRect(symbol3Rect);
        canvas.translate(symbol3Rect.left, symbol3Rect.top);
        RectF symbol3TargetRect = CacheForClockPlayground.symbol3TargetRect;
        symbol3TargetRect.set(0f, 0f, symbol3Rect.width(), symbol3Rect.height());
        StyleKitName.drawClock(canvas, context, symbol3TargetRect, ResizingBehavior.Stretch, color4, color4, color5, color4, color4, color3, 16f, 6f, 43f);
        canvas.restore();
    }
    
    
}

class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
