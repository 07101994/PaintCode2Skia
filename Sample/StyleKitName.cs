// Generated with PaintCode2Skia
using SkiaSharp;
using System;
using System.IO;
using System.Collections.Generic;
using PaintCode;

namespace PaintCodeResources
{



/**
 * Created by AuthorName on 10 Nov 2017.
 * Copyright Â© 2017 CompanyName. All rights reserved.
 *
 * This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
 * http://www.paintcodeapp.com
 *
 * @author AuthorName
 */
public class StyleKitName {
    
    // In Trial version of PaintCode, the code generation is limited to 3 canvases.
    // Canvas Drawings
    // Tab
    internal static class CacheForClock {
        private static SKPaint paint_store; public static SKPaint paint { get { if (paint_store == null) paint_store = new SKPaint(); return paint_store; } }
        public static SKRect originalFrame = new SKRect(0f, 0f, 260f, 260f);
        private static SKPath oval2Path_store; public static SKPath oval2Path { get { if (oval2Path_store == null) oval2Path_store = new SKPath(); return oval2Path_store; } }
        private static SKPath ovalPath_store; public static SKPath ovalPath { get { if (ovalPath_store == null) ovalPath_store = new SKPath(); return ovalPath_store; } }
        private static SKPath textPath_store; public static SKPath textPath { get { if (textPath_store == null) textPath_store = new SKPath(); return textPath_store; } }
        private static SKPath bezierPath_store; public static SKPath bezierPath { get { if (bezierPath_store == null) bezierPath_store = new SKPath(); return bezierPath_store; } }
        private static SKPath bezier2Path_store; public static SKPath bezier2Path { get { if (bezier2Path_store == null) bezier2Path_store = new SKPath(); return bezier2Path_store; } }
        private static SKPath bezier3Path_store; public static SKPath bezier3Path { get { if (bezier3Path_store == null) bezier3Path_store = new SKPath(); return bezier3Path_store; } }
        private static SKPath rectanglePath_store; public static SKPath rectanglePath { get { if (rectanglePath_store == null) rectanglePath_store = new SKPath(); return rectanglePath_store; } }
        private static SKPath rectangle2Path_store; public static SKPath rectangle2Path { get { if (rectangle2Path_store == null) rectangle2Path_store = new SKPath(); return rectangle2Path_store; } }
        private static SKPath rectangle3Path_store; public static SKPath rectangle3Path { get { if (rectangle3Path_store == null) rectangle3Path_store = new SKPath(); return rectangle3Path_store; } }
        private static SKPath rectangle4Path_store; public static SKPath rectangle4Path { get { if (rectangle4Path_store == null) rectangle4Path_store = new SKPath(); return rectangle4Path_store; } }
        private static SKPath rectangle5Path_store; public static SKPath rectangle5Path { get { if (rectangle5Path_store == null) rectangle5Path_store = new SKPath(); return rectangle5Path_store; } }
        private static SKPath rectangle6Path_store; public static SKPath rectangle6Path { get { if (rectangle6Path_store == null) rectangle6Path_store = new SKPath(); return rectangle6Path_store; } }
        private static SKPath rectangle7Path_store; public static SKPath rectangle7Path { get { if (rectangle7Path_store == null) rectangle7Path_store = new SKPath(); return rectangle7Path_store; } }
        private static SKPath rectangle8Path_store; public static SKPath rectangle8Path { get { if (rectangle8Path_store == null) rectangle8Path_store = new SKPath(); return rectangle8Path_store; } }
        private static SKPath rectangle9Path_store; public static SKPath rectangle9Path { get { if (rectangle9Path_store == null) rectangle9Path_store = new SKPath(); return rectangle9Path_store; } }
        private static SKPath rectangle10Path_store; public static SKPath rectangle10Path { get { if (rectangle10Path_store == null) rectangle10Path_store = new SKPath(); return rectangle10Path_store; } }
        private static SKPath rectangle11Path_store; public static SKPath rectangle11Path { get { if (rectangle11Path_store == null) rectangle11Path_store = new SKPath(); return rectangle11Path_store; } }
        private static SKPath rectangle12Path_store; public static SKPath rectangle12Path { get { if (rectangle12Path_store == null) rectangle12Path_store = new SKPath(); return rectangle12Path_store; } }
        private static SKPaint text2TextPaint_store; public static SKPaint text2TextPaint { get { if (text2TextPaint_store == null) text2TextPaint_store = new SKPaint(); return text2TextPaint_store; } }
        private static PaintCodeStaticLayout text2StaticLayout_store; public static PaintCodeStaticLayout text2StaticLayout { get { if (text2StaticLayout_store == null) text2StaticLayout_store = new PaintCodeStaticLayout(); return text2StaticLayout_store; } }
        private static SKPaint text3TextPaint_store; public static SKPaint text3TextPaint { get { if (text3TextPaint_store == null) text3TextPaint_store = new SKPaint(); return text3TextPaint_store; } }
        private static PaintCodeStaticLayout text3StaticLayout_store; public static PaintCodeStaticLayout text3StaticLayout { get { if (text3StaticLayout_store == null) text3StaticLayout_store = new PaintCodeStaticLayout(); return text3StaticLayout_store; } }
        private static SKPaint text4TextPaint_store; public static SKPaint text4TextPaint { get { if (text4TextPaint_store == null) text4TextPaint_store = new SKPaint(); return text4TextPaint_store; } }
        private static PaintCodeStaticLayout text4StaticLayout_store; public static PaintCodeStaticLayout text4StaticLayout { get { if (text4StaticLayout_store == null) text4StaticLayout_store = new PaintCodeStaticLayout(); return text4StaticLayout_store; } }
        private static SKPaint text13TextPaint_store; public static SKPaint text13TextPaint { get { if (text13TextPaint_store == null) text13TextPaint_store = new SKPaint(); return text13TextPaint_store; } }
        private static PaintCodeStaticLayout text13StaticLayout_store; public static PaintCodeStaticLayout text13StaticLayout { get { if (text13StaticLayout_store == null) text13StaticLayout_store = new PaintCodeStaticLayout(); return text13StaticLayout_store; } }
    }
    
    public static void drawClock(SKCanvas canvas, Context context, SKColor numbersColor, SKColor darkHandsColor, SKColor lightHandColor, SKColor rimColor, SKColor tickColor, SKColor faceColor, float hours, float minutes, float seconds)
    {
        StyleKitName.drawClock(canvas, context, new SKRect(0f, 0f, 260f, 260f), ResizingBehavior.AspectFit, numbersColor, darkHandsColor, lightHandColor, rimColor, tickColor, faceColor, hours, minutes, seconds);
    }
    
    public static void drawClock(SKCanvas canvas, Context context, SKRect targetFrame, ResizingBehavior resizing, SKColor numbersColor, SKColor darkHandsColor, SKColor lightHandColor, SKColor rimColor, SKColor tickColor, SKColor faceColor, float hours, float minutes, float seconds)
    {
        // General Declarations
//         Stack<Matrix> currentTransformation = new Stack<Matrix>(); // skipping - we do not support Matrix yet
//         currentTransformation.push(new Matrix()); // skipping - we do not support Matrix yet
        SKPaint paint = CacheForClock.paint;
        
        // Local Variables
        String expression = hours > 12f ? "PM" : "AM";
        float secondsAngle = -seconds / 60f * 360f;
        float minuteAngle = -(minutes / 60f * 360f - secondsAngle / 60f);
        float hourAngle = -hours / 12f * 360f + minuteAngle / 12f;
        
        // Resize to Target Frame
        canvas.Save();
        var resizedFrame = Helpers.ResizingBehaviorApply(resizing, CacheForClock.originalFrame, targetFrame);
        canvas.Translate(resizedFrame.Left, resizedFrame.Top);
        canvas.Scale(resizedFrame.Width / 260f, resizedFrame.Height / 260f);
        
        // Oval 2
        canvas.Save();
        canvas.Translate(130f, 130f);
//         currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
        var oval2Rect = new SKRect(-116f, -116f, 116f, 116f);
        SKPath oval2Path = CacheForClock.oval2Path;
        oval2Path.Reset();
        oval2Path.AddOval(oval2Rect, SKPathDirection.Clockwise);
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)rimColor;
        canvas.DrawPath(oval2Path, paint);
        canvas.Restore();
        
        // Oval
        canvas.Save();
        canvas.Translate(130f, 130f);
//         currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
        var ovalRect = new SKRect(-110f, -110f, 110f, 110f);
        SKPath ovalPath = CacheForClock.ovalPath;
        ovalPath.Reset();
        ovalPath.AddOval(ovalRect, SKPathDirection.Clockwise);
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)faceColor;
        canvas.DrawPath(ovalPath, paint);
        canvas.Restore();
        
        // Text
        var textRect = new SKRect(118.48f, 34.85f, 142.5f, 53f);
        SKPath textPath = CacheForClock.textPath;
        textPath.Reset();
        textPath.MoveTo(123.73f, 38.95f);
        textPath.LineTo(120.23f, 41.82f);
        textPath.LineTo(118.48f, 39.75f);
        textPath.LineTo(124f, 35.3f);
        textPath.LineTo(126.73f, 35.3f);
        textPath.LineTo(126.73f, 53f);
        textPath.LineTo(123.73f, 53f);
        textPath.LineTo(123.73f, 38.95f);
        textPath.Close();
        textPath.MoveTo(130.73f, 50.25f);
        textPath.LineTo(137.55f, 43.55f);
        textPath.CubicTo(138.1f, 43.02f, 138.54f, 42.48f, 138.86f, 41.94f);
        textPath.CubicTo(139.19f, 41.4f, 139.35f, 40.78f, 139.35f, 40.07f);
        textPath.CubicTo(139.35f, 39.24f, 139.08f, 38.58f, 138.54f, 38.09f);
        textPath.CubicTo(138f, 37.6f, 137.33f, 37.35f, 136.53f, 37.35f);
        textPath.CubicTo(135.67f, 37.35f, 134.99f, 37.64f, 134.48f, 38.21f);
        textPath.CubicTo(133.96f, 38.79f, 133.64f, 39.51f, 133.53f, 40.38f);
        textPath.LineTo(130.6f, 39.92f);
        textPath.CubicTo(130.68f, 39.19f, 130.89f, 38.52f, 131.23f, 37.9f);
        textPath.CubicTo(131.56f, 37.28f, 131.98f, 36.75f, 132.5f, 36.3f);
        textPath.CubicTo(133.02f, 35.85f, 133.62f, 35.5f, 134.31f, 35.24f);
        textPath.CubicTo(135f, 34.98f, 135.76f, 34.85f, 136.57f, 34.85f);
        textPath.CubicTo(137.34f, 34.85f, 138.08f, 34.96f, 138.79f, 35.17f);
        textPath.CubicTo(139.5f, 35.39f, 140.12f, 35.72f, 140.68f, 36.16f);
        textPath.CubicTo(141.23f, 36.6f, 141.66f, 37.15f, 141.99f, 37.79f);
        textPath.CubicTo(142.31f, 38.43f, 142.48f, 39.17f, 142.48f, 40.03f);
        textPath.CubicTo(142.48f, 40.59f, 142.4f, 41.12f, 142.25f, 41.61f);
        textPath.CubicTo(142.1f, 42.1f, 141.9f, 42.57f, 141.64f, 43f);
        textPath.CubicTo(141.38f, 43.43f, 141.08f, 43.85f, 140.74f, 44.24f);
        textPath.CubicTo(140.4f, 44.63f, 140.03f, 45.01f, 139.63f, 45.38f);
        textPath.LineTo(134.53f, 50.25f);
        textPath.LineTo(142.5f, 50.25f);
        textPath.LineTo(142.5f, 53f);
        textPath.LineTo(130.73f, 53f);
        textPath.LineTo(130.73f, 50.25f);
        textPath.Close();
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)numbersColor;
        canvas.DrawPath(textPath, paint);
        
        // Bezier
        canvas.Save();
        canvas.Translate(130f, 130f);
//         currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
        canvas.RotateDegrees(-(minuteAngle + 90f));
//         currentTransformation.peek().postRotate(-(minuteAngle + 90f)); // skipping - we do not support Matrix yet
        var bezierRect = new SKRect(-10f, -10f, 95f, 10f);
        SKPath bezierPath = CacheForClock.bezierPath;
        bezierPath.Reset();
        bezierPath.MoveTo(7.07f, -7.07f);
        bezierPath.CubicTo(8.25f, -5.89f, 9.07f, -4.49f, 9.54f, -3f);
        bezierPath.LineTo(95f, -3f);
        bezierPath.LineTo(95f, 3f);
        bezierPath.LineTo(9.54f, 3f);
        bezierPath.CubicTo(9.07f, 4.49f, 8.25f, 5.89f, 7.07f, 7.07f);
        bezierPath.CubicTo(3.17f, 10.98f, -3.17f, 10.98f, -7.07f, 7.07f);
        bezierPath.CubicTo(-10.98f, 3.17f, -10.98f, -3.17f, -7.07f, -7.07f);
        bezierPath.CubicTo(-3.17f, -10.98f, 3.17f, -10.98f, 7.07f, -7.07f);
        bezierPath.Close();
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)darkHandsColor;
        canvas.DrawPath(bezierPath, paint);
        canvas.Restore();
        
        // Bezier 2
        canvas.Save();
        canvas.Translate(130f, 130f);
//         currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
        canvas.RotateDegrees(-(hourAngle + 90f));
//         currentTransformation.peek().postRotate(-(hourAngle + 90f)); // skipping - we do not support Matrix yet
        var bezier2Rect = new SKRect(-10f, -10f, 56f, 10f);
        SKPath bezier2Path = CacheForClock.bezier2Path;
        bezier2Path.Reset();
        bezier2Path.MoveTo(7.07f, -7.07f);
        bezier2Path.CubicTo(7.7f, -6.44f, 8.24f, -5.74f, 8.66f, -5f);
        bezier2Path.LineTo(56f, -5f);
        bezier2Path.LineTo(56f, 5f);
        bezier2Path.LineTo(8.66f, 5f);
        bezier2Path.CubicTo(8.24f, 5.74f, 7.7f, 6.44f, 7.07f, 7.07f);
        bezier2Path.CubicTo(3.17f, 10.98f, -3.17f, 10.98f, -7.07f, 7.07f);
        bezier2Path.CubicTo(-10.98f, 3.17f, -10.98f, -3.17f, -7.07f, -7.07f);
        bezier2Path.CubicTo(-3.17f, -10.98f, 3.17f, -10.98f, 7.07f, -7.07f);
        bezier2Path.Close();
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)darkHandsColor;
        canvas.DrawPath(bezier2Path, paint);
        canvas.Restore();
        
        // Bezier 3
        canvas.Save();
        canvas.Translate(130f, 130f);
//         currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
        canvas.RotateDegrees(-(secondsAngle + 90f));
//         currentTransformation.peek().postRotate(-(secondsAngle + 90f)); // skipping - we do not support Matrix yet
        var bezier3Rect = new SKRect(-6f, -6f, 99f, 6f);
        SKPath bezier3Path = CacheForClock.bezier3Path;
        bezier3Path.Reset();
        bezier3Path.MoveTo(4.24f, -4.24f);
        bezier3Path.CubicTo(5.16f, -3.33f, 5.72f, -2.19f, 5.92f, -1f);
        bezier3Path.LineTo(99f, -1f);
        bezier3Path.LineTo(99f, 1f);
        bezier3Path.LineTo(5.92f, 1f);
        bezier3Path.CubicTo(5.72f, 2.19f, 5.16f, 3.33f, 4.24f, 4.24f);
        bezier3Path.CubicTo(1.9f, 6.59f, -1.9f, 6.59f, -4.24f, 4.24f);
        bezier3Path.CubicTo(-6.59f, 1.9f, -6.59f, -1.9f, -4.24f, -4.24f);
        bezier3Path.CubicTo(-1.9f, -6.59f, 1.9f, -6.59f, 4.24f, -4.24f);
        bezier3Path.Close();
        
        paint.Reset();
        paint.IsAntialias = true;
        paint.Style = SKPaintStyle.Fill;
        paint.Color = (SKColor)lightHandColor;
        canvas.DrawPath(bezier3Path, paint);
        canvas.Restore();
        
        // Group
        {
            // Rectangle
        var rectangleRect = new SKRect(127f, 20f, 133f, 28f);
            SKPath rectanglePath = CacheForClock.rectanglePath;
            rectanglePath.Reset();
            rectanglePath.AddRect(rectangleRect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectanglePath, paint);
            
            // Rectangle 2
        var rectangle2Rect = new SKRect(127f, 232f, 133f, 240f);
            SKPath rectangle2Path = CacheForClock.rectangle2Path;
            rectangle2Path.Reset();
            rectangle2Path.AddRect(rectangle2Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle2Path, paint);
        }
        
        // Group 2
        {
            canvas.Save();
            canvas.Translate(130f, 130f);
//             currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
            canvas.RotateDegrees(90f);
//             currentTransformation.peek().postRotate(90f); // skipping - we do not support Matrix yet
            
            // Rectangle 3
        var rectangle3Rect = new SKRect(-3f, -110f, 3f, -102f);
            SKPath rectangle3Path = CacheForClock.rectangle3Path;
            rectangle3Path.Reset();
            rectangle3Path.AddRect(rectangle3Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle3Path, paint);
            
            // Rectangle 4
        var rectangle4Rect = new SKRect(-3f, 102f, 3f, 110f);
            SKPath rectangle4Path = CacheForClock.rectangle4Path;
            rectangle4Path.Reset();
            rectangle4Path.AddRect(rectangle4Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle4Path, paint);
            
            canvas.Restore();
        }
        
        // Group 3
        {
            canvas.Save();
            canvas.Translate(130f, 130f);
//             currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
            canvas.RotateDegrees(-30f);
//             currentTransformation.peek().postRotate(-30f); // skipping - we do not support Matrix yet
            
            // Rectangle 5
        var rectangle5Rect = new SKRect(-3f, -110f, 3f, -102f);
            SKPath rectangle5Path = CacheForClock.rectangle5Path;
            rectangle5Path.Reset();
            rectangle5Path.AddRect(rectangle5Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle5Path, paint);
            
            // Rectangle 6
        var rectangle6Rect = new SKRect(-3f, 102f, 3f, 110f);
            SKPath rectangle6Path = CacheForClock.rectangle6Path;
            rectangle6Path.Reset();
            rectangle6Path.AddRect(rectangle6Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle6Path, paint);
            
            canvas.Restore();
        }
        
        // Group 4
        {
            canvas.Save();
            canvas.Translate(130f, 130f);
//             currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
            canvas.RotateDegrees(-60f);
//             currentTransformation.peek().postRotate(-60f); // skipping - we do not support Matrix yet
            
            // Rectangle 7
        var rectangle7Rect = new SKRect(-3f, -110f, 3f, -102f);
            SKPath rectangle7Path = CacheForClock.rectangle7Path;
            rectangle7Path.Reset();
            rectangle7Path.AddRect(rectangle7Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle7Path, paint);
            
            // Rectangle 8
        var rectangle8Rect = new SKRect(-3f, 102f, 3f, 110f);
            SKPath rectangle8Path = CacheForClock.rectangle8Path;
            rectangle8Path.Reset();
            rectangle8Path.AddRect(rectangle8Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle8Path, paint);
            
            canvas.Restore();
        }
        
        // Group 5
        {
            canvas.Save();
            canvas.Translate(130f, 130f);
//             currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
            canvas.RotateDegrees(-120f);
//             currentTransformation.peek().postRotate(-120f); // skipping - we do not support Matrix yet
            
            // Rectangle 9
        var rectangle9Rect = new SKRect(-3f, -110f, 3f, -102f);
            SKPath rectangle9Path = CacheForClock.rectangle9Path;
            rectangle9Path.Reset();
            rectangle9Path.AddRect(rectangle9Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle9Path, paint);
            
            // Rectangle 10
        var rectangle10Rect = new SKRect(-3f, 102f, 3f, 110f);
            SKPath rectangle10Path = CacheForClock.rectangle10Path;
            rectangle10Path.Reset();
            rectangle10Path.AddRect(rectangle10Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle10Path, paint);
            
            canvas.Restore();
        }
        
        // Group 6
        {
            canvas.Save();
            canvas.Translate(130f, 130f);
//             currentTransformation.peek().postTranslate(130f, 130f); // skipping - we do not support Matrix yet
            canvas.RotateDegrees(-150f);
//             currentTransformation.peek().postRotate(-150f); // skipping - we do not support Matrix yet
            
            // Rectangle 11
        var rectangle11Rect = new SKRect(-3f, -110f, 3f, -102f);
            SKPath rectangle11Path = CacheForClock.rectangle11Path;
            rectangle11Path.Reset();
            rectangle11Path.AddRect(rectangle11Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle11Path, paint);
            
            // Rectangle 12
        var rectangle12Rect = new SKRect(-3f, 102f, 3f, 110f);
            SKPath rectangle12Path = CacheForClock.rectangle12Path;
            rectangle12Path.Reset();
            rectangle12Path.AddRect(rectangle12Rect, SKPathDirection.Clockwise);
            
            paint.Reset();
            paint.IsAntialias = true;
            paint.Style = SKPaintStyle.Fill;
            paint.Color = (SKColor)tickColor;
            canvas.DrawPath(rectangle12Path, paint);
            
            canvas.Restore();
        }
        
        // Text 2
        var text2Rect = new SKRect(111f, 198f, 149f, 238f);
        var text2TextPaint = CacheForClock.text2TextPaint;
        text2TextPaint.Reset();
        text2TextPaint.IsAntialias = true;
        text2TextPaint.Color = (SKColor)numbersColor;
        text2TextPaint.Typeface = TypefaceManager.GetTypeface("Avenir Next.ttc");
        text2TextPaint.TextSize = 25f;
        StaticLayout text2StaticLayout = CacheForClock.text2StaticLayout.get((int) text2Rect.Width, SKTextAlign.Center, "6", text2TextPaint);
        canvas.Save();
        canvas.ClipRect(text2Rect);
        canvas.Translate(text2Rect.Left, text2Rect.Top + (text2Rect.Height - text2StaticLayout.getHeight()) / 2f);
        text2StaticLayout.draw(canvas);
        canvas.Restore();
        
        // Text 3
        var text3Rect = new SKRect(201f, 110f, 239f, 150f);
        var text3TextPaint = CacheForClock.text3TextPaint;
        text3TextPaint.Reset();
        text3TextPaint.IsAntialias = true;
        text3TextPaint.Color = (SKColor)numbersColor;
        text3TextPaint.Typeface = TypefaceManager.GetTypeface("Avenir Next.ttc");
        text3TextPaint.TextSize = 25f;
        StaticLayout text3StaticLayout = CacheForClock.text3StaticLayout.get((int) text3Rect.Width, SKTextAlign.Center, "3", text3TextPaint);
        canvas.Save();
        canvas.ClipRect(text3Rect);
        canvas.Translate(text3Rect.Left, text3Rect.Top + (text3Rect.Height - text3StaticLayout.getHeight()) / 2f);
        text3StaticLayout.draw(canvas);
        canvas.Restore();
        
        // Text 4
        var text4Rect = new SKRect(22f, 110f, 60f, 150f);
        var text4TextPaint = CacheForClock.text4TextPaint;
        text4TextPaint.Reset();
        text4TextPaint.IsAntialias = true;
        text4TextPaint.Color = (SKColor)numbersColor;
        text4TextPaint.Typeface = TypefaceManager.GetTypeface("Avenir Next.ttc");
        text4TextPaint.TextSize = 25f;
        StaticLayout text4StaticLayout = CacheForClock.text4StaticLayout.get((int) text4Rect.Width, SKTextAlign.Center, "9", text4TextPaint);
        canvas.Save();
        canvas.ClipRect(text4Rect);
        canvas.Translate(text4Rect.Left, text4Rect.Top + (text4Rect.Height - text4StaticLayout.getHeight()) / 2f);
        text4StaticLayout.draw(canvas);
        canvas.Restore();
        
        // Text 13
        var text13Rect = new SKRect(99f, 144f, 161f, 178f);
        var text13TextPaint = CacheForClock.text13TextPaint;
        text13TextPaint.Reset();
        text13TextPaint.IsAntialias = true;
        text13TextPaint.Color = (SKColor)numbersColor;
        text13TextPaint.Typeface = TypefaceManager.GetTypeface("Avenir Next.ttc");
        text13TextPaint.TextSize = 20f;
        StaticLayout text13StaticLayout = CacheForClock.text13StaticLayout.get((int) text13Rect.Width, SKTextAlign.Center, expression, text13TextPaint);
        canvas.Save();
        canvas.ClipRect(text13Rect);
        canvas.Translate(text13Rect.Left, text13Rect.Top + (text13Rect.Height - text13StaticLayout.getHeight()) / 2f);
        text13StaticLayout.draw(canvas);
        canvas.Restore();
        
        canvas.Restore();
    }
    
    internal static class CacheForClockPlayground {
    }
    
    public static void drawClockPlayground(SKCanvas canvas, Context context, SKColor numbersColor, SKColor darkHandsColor, SKColor lightHandColor, SKColor rimColor, SKColor tickColor, SKColor faceColor)
    {
        // Local Colors
        SKColor color4 = Helpers.ColorFromArgb(255, 255, 255, 255);
        SKColor color2 = Helpers.ColorFromArgb(255, 56, 95, 117);
        SKColor color5 = Helpers.ColorFromArgb(255, 22, 216, 217);
        SKColor color = Helpers.ColorFromArgb(255, 255, 0, 0);
        SKColor color3 = Helpers.ColorFromArgb(255, 74, 74, 74);
        
        // Symbol
        var symbolRect = new SKRect(90f, 30f, 348f, 288f);
        canvas.Save();
        canvas.ClipRect(symbolRect);
        canvas.Translate(symbolRect.Left, symbolRect.Top);
        var symbolTargetRect = new SKRect(0f, 0f, symbolRect.Width, symbolRect.Height);
        StyleKitName.drawClock(canvas, context, symbolTargetRect, ResizingBehavior.Stretch, color5, color2, color, color2, tickColor, faceColor, 11f, 45f, 39f);
        canvas.Restore();
        
        // Symbol 2
        var symbol2Rect = new SKRect(348f, 33f, 601f, 286f);
        canvas.Save();
        canvas.ClipRect(symbol2Rect);
        canvas.Translate(symbol2Rect.Left, symbol2Rect.Top);
        var symbol2TargetRect = new SKRect(0f, 0f, symbol2Rect.Width, symbol2Rect.Height);
        StyleKitName.drawClock(canvas, context, symbol2TargetRect, ResizingBehavior.Stretch, numbersColor, darkHandsColor, lightHandColor, rimColor, tickColor, faceColor, 7f, 43f, 3f);
        canvas.Restore();
        
        // Symbol 3
        var symbol3Rect = new SKRect(611f, 33f, 871f, 293f);
        canvas.Save();
        canvas.ClipRect(symbol3Rect);
        canvas.Translate(symbol3Rect.Left, symbol3Rect.Top);
        var symbol3TargetRect = new SKRect(0f, 0f, symbol3Rect.Width, symbol3Rect.Height);
        StyleKitName.drawClock(canvas, context, symbol3TargetRect, ResizingBehavior.Stretch, color4, color4, color5, color4, color4, color3, 16f, 6f, 43f);
        canvas.Restore();
    }
    
}

    
} // end of namespace
